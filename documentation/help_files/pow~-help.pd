#N canvas 432 54 567 635 10;
#X declare -stdpath ./;
#X obj 6 608 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 6 437 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 503 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 6 542 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 108 447 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 108 474 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 108 515 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 169 514 signal;
#X text 156 552 1) float;
#X text 228 552 - sets base value (default 0);
#X text 134 475 float/signal;
#X text 228 447 - sets the exponent;
#X text 228 474 - sets the base value;
#X obj 145 342 cyclone/pow~, f 21;
#X text 69 136 [cyclone/pow~] has the inlets'functionality reversed in comparison to pd vanilla's [pow~] \, other than that \, it's quite the same!;
#X text 70 179 [cyclone/pow~] raises the base value (set in the right inlet) to the power of the exponent (set in the left inlet). Either inlet can receive a signal or float.;
#X text 228 514 - the base raised to the exponent;
#X text 69 224 [cyclone/pow~] can be useful for generating curves from [line~] as in the example below to the right.;
#N canvas 810 209 422 386 example 0;
#X obj 116 215 cyclone/cycle~;
#X obj 116 106 cyclone/pow~ 4;
#X obj 116 178 *~ 220;
#X obj 116 76 vline~;
#X msg 116 45 0 \, 1 1000 \, 0 1000 1000;
#X text 113 25 click for pitch glissando;
#X text 279 209 4;
#X text 279 299 1;
#X obj 256 216 vsl 20 90 1 4 0 0 empty empty empty 0 -9 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 116 255 output~;
#X obj 255 175 cyclone/snapshot~ 1;
#X obj 152 340 declare -stdpath ./;
#X connect 0 0 9 0;
#X connect 1 0 2 0;
#X connect 1 0 10 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X connect 10 0 8 0;
#X restore 478 370 pd example;
#X obj 268 308 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 268 278 10;
#X msg 300 281 2;
#X obj 499 69 cyclone/dsponoff~;
#N canvas 836 207 420 324 name 0;
#X text 196 170 <= from Pd Vanilla;
#X text 28 133 And still create the vanilla object from vanilla without namespaces as:;
#X text 205 274 and;
#X text 29 14 Pd also has a vanilla object named [pow~]. Cyclone avoids name clashing and overwriting an internal in Pd Vanilla \, but for that you need to use the cyclone namespace ("cyclone/" before the object name) \, as it's the common practice for cyclone's documentation. So you create it as:;
#X obj 146 95 cyclone/pow~;
#X obj 160 170 pow~;
#X obj 94 274 cyclone/Pow~;
#X text 29 222 Other ways to load [pow~] is with a capital letter \, either with or without 'cyclone/' such as:;
#X obj 255 274 Pow~, f 9;
#X restore 459 397 pd name clash;
#X obj 2 576 cnv 3 550 3 empty empty more_info 8 12 0 13 #dcdcdc #000000 0;
#X text 170 584 inf/nan output values become "0";
#X obj 2 2 ./header pow~;
#X text 22 61 Signal power function;
#X floatatom 145 280 7 0 0 0 - - - 12;
#X obj 145 310 sig~;
#X text 170 447 signal;
#X obj 145 373 cyclone/snapshot~ 1;
#X floatatom 145 401 7 0 0 0 - - - 12;
#X obj 68 84 cnv 15 350 45 empty empty empty 20 12 0 14 #f0b8c4 #404040 0;
#X text 123 87 Redundanct and deprecated object;
#X text 118 107 Quite similar to Pd Vanilla's [pow~];
#X connect 13 0 31 0;
#X connect 19 0 13 1;
#X connect 20 0 19 0;
#X connect 21 0 19 0;
#X connect 28 0 29 0;
#X connect 29 0 13 0;
#X connect 31 0 32 0;
