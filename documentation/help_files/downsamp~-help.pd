#N canvas 456 69 558 586 10;
#X declare -stdpath ./;
#X obj 3 560 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 3 427 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 483 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 520 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 85 459 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 153 436 signal;
#X obj 86 492 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 85 436 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 131 200 noise~;
#X floatatom 230 202 5 1 10000 0 - - - 0;
#X text 82 93 [downsamp~] samples and holds a signal received in the left inlet at a rate expressed in samples. No interpolation of the output is performed.;
#X text 117 461 float/signal;
#X text 208 462 - rate (in samples) used to downsample the input signal;
#X obj 321 332 cyclone/mstosamps~;
#X text 209 435 - signal to be downsampled;
#X obj 131 228 cyclone/downsamp~;
#X text 269 201 <= downsample rate in samples;
#X text 83 141 You can specify the number of samples with floating-point values \, but the downsamp~ object will sample the input at most as frequently as the current sampling rate (1 sample).;
#X text 302 286 note you can convert ms to;
#X text 304 303 samples with [mstosamps~];
#X text 202 493 - downsampled signal;
#X text 153 492 signal;
#X text 141 532 1) float;
#X text 208 532 - rate as number of samples (default 1).;
#X obj 131 266 output~;
#X obj 4 2 ./header downsamp~;
#X text 22 61 Downsample a signal;
#X obj 130 340 declare -stdpath ./;
#X text 57 385 see also:;
#X obj 403 398 open-else;
#X text 478 376 click;
#X msg 403 376 downsample~;
#X text 134 379 Plugdata users or those with ELSE can also use [else/downsample~] as an alternative, f 42;
#X connect 8 0 15 0;
#X connect 9 0 15 1;
#X connect 15 0 24 0;
#X connect 31 0 29 0;
