#N canvas 407 23 559 519 10;
#X obj 5 366 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 422 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 462 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 91 377 cnv 17 3 38 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 91 435 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 148 470 (none);
#X obj 213 253 print;
#X obj 213 226 cyclone/iter;
#X obj 4 491 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 160 378 bang;
#X text 112 435 float/symbol;
#X text 136 397 anything;
#X text 197 378 - outputs the last received input as sequential elements;
#X text 197 397 - split elements sequentially;
#X msg 182 145 1 2 three;
#X msg 213 171 list one two 3;
#X msg 233 198 any message type;
#X text 197 435 - according to the input element \, in sequential order;
#X obj 67 256 print;
#X obj 39 180 bng 17 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X obj 67 150 loadbang;
#X msg 67 180 1 2 3;
#X obj 67 224 cyclone/iter;
#X text 71 92 [iter] is similar to [unnpack] \, it splist a message (to floats/symbols) but outputs them sequentially in the given order.;
#X msg 390 163 60 63 67;
#X obj 390 191 cyclone/iter;
#X obj 390 225 makenote 64 500;
#X obj 430 257 noteout;
#X text 381 141 a chord from list;
#X obj 5 4 ./header iter;
#X text 19 62 Split messages sequentially;
#X text 51 318 see also:;
#X obj 394 331 open-else;
#X text 447 309 click;
#X msg 394 309 iterate;
#X text 121 313 Plugdata users or those with ELSE can also use [else/iterate] as an alternative, f 41;
#X connect 7 0 6 0;
#X connect 14 0 7 0;
#X connect 15 0 7 0;
#X connect 16 0 7 0;
#X connect 19 0 22 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 18 0;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 26 1 27 1;
#X connect 34 0 32 0;
